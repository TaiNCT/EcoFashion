import axios from "axios";

const API_BASE_URL = import.meta.env.DEV
  ? "/api" // S·ª≠ d·ª•ng proxy trong dev mode
  : "https://localhost:7265/api";

const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
});

// Interceptor ƒë·ªÉ th√™m token v√†o header n·∫øu c√≥
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("authToken");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Interceptor ƒë·ªÉ x·ª≠ l√Ω response v√† error
apiClient.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    if (error.response?.status === 401) {
      // Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
      localStorage.removeItem("authToken");
      localStorage.removeItem("userInfo");
      window.location.href = "/login";
    }
    return Promise.reject(error);
  }
);

export interface LoginRequest {
  email: string;
  passwordHash: string; // ƒê·ªïi t√™n field theo backend
}

export interface RegisterRequest {
  email: string;
  password: string;
  confirmPassword?: string;
}

// Interface cho user response
export interface UserResponse {
  userId: number;
  fullName: string;
  email: string;
  phone?: string;
  username?: string;
  role: string;
  roleId: number;
  status: string;
  createdAt: string;
}

// Interface cho login response t·ª´ backend
export interface LoginResponse {
  token: string;
  user: UserResponse;
  expiresAt: string;
}

// Interface cho API response t·ª´ backend th·ª±c t·∫ø
export interface ApiResponse<T> {
  success: boolean;
  result: T;
  errorMessage: string | null;
}

export const authApi = {
  login: async (
    email: string,
    password: string
  ): Promise<{ token: string; user: UserResponse }> => {
    try {
      const credentials: LoginRequest = {
        email,
        passwordHash: password, // ƒê·ªïi t√™n field theo backend
      };

      console.log("üîê Login Request:", { email, password: "***" });

      const response = await apiClient.post<ApiResponse<LoginResponse>>(
        "/User/login",
        credentials
      );

      if (response.data.success && response.data.result) {
        const { token, user, expiresAt } = response.data.result;

        console.log("‚úÖ Login Success:", {
          userId: user.userId,
          email: user.email,
          role: user.role,
          expiresAt,
        });

        localStorage.setItem("authToken", token);
        localStorage.setItem("tokenExpiresAt", expiresAt);

        return { token, user };
      } else {
        const errorMsg = response.data.errorMessage || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i";
        console.error("‚ùå Login Failed:", errorMsg);
        throw new Error(errorMsg);
      }
    } catch (error: any) {
      console.error("üö® Login Error:", error);

      if (error.response?.data?.errorMessage) {
        throw new Error(error.response.data.errorMessage);
      } else if (error.response?.status === 400) {
        throw new Error("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá");
      } else if (error.response?.status === 401) {
        throw new Error("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");
      } else if (error.response?.status === 404) {
        throw new Error("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i");
      } else if (error.response?.status >= 500) {
        throw new Error("L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau");
      } else if (
        error.code === "ECONNREFUSED" ||
        error.message.includes("Network Error")
      ) {
        throw new Error(
          "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng."
        );
      } else if (error.message) {
        throw new Error(error.message);
      } else {
        throw new Error("ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh");
      }
    }
  },

  register: async (
    email: string,
    password: string
  ): Promise<{ token: string; user: UserResponse }> => {
    try {
      const userData: RegisterRequest = { email, password: password };

      const response = await apiClient.post<ApiResponse<LoginResponse>>(
        "/User/register",
        userData
      );

      if (response.data.success && response.data.result) {
        const { token, user, expiresAt } = response.data.result;

        localStorage.setItem("authToken", token);
        localStorage.setItem("tokenExpiresAt", expiresAt);

        return { token, user };
      } else {
        const errorMsg = response.data.errorMessage || "ƒêƒÉng k√Ω th·∫•t b·∫°i";
        throw new Error(errorMsg);
      }
    } catch (error: any) {
      if (error.response?.data?.errorMessage) {
        throw new Error(error.response.data.errorMessage);
      } else if (error.response?.status === 400) {
        throw new Error("Th√¥ng tin ƒëƒÉng k√Ω kh√¥ng h·ª£p l·ªá");
      } else if (error.response?.status === 409) {
        throw new Error("Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng");
      } else if (error.response?.status >= 500) {
        throw new Error("L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau");
      } else if (error.message) {
        throw new Error(error.message);
      } else {
        throw new Error("L·ªói k·∫øt n·ªëi ƒë·∫øn server");
      }
    }
  },

  logout: async (): Promise<void> => {
    try {
      await apiClient.post("/User/logout");
    } catch (error) {
      console.warn("Logout API call failed, but continuing with local logout");
    } finally {
      localStorage.removeItem("authToken");
      localStorage.removeItem("userInfo");
    }
  },

  getCurrentUser: (): UserResponse | null => {
    try {
      const userInfo = localStorage.getItem("userInfo");
      return userInfo ? JSON.parse(userInfo) : null;
    } catch (error) {
      return null;
    }
  },

  isAuthenticated: (): boolean => {
    const token = localStorage.getItem("authToken");
    return !!token;
  },
};

export default apiClient;
